services:
  frontend:
    container_name: my-dashboard
    build:
      context: ./my-dashboard
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    networks:
      - clean-energy-network
    restart: always

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    volumes:
      - ./data/nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot

        # - ./nginx/nginx.conf:/etc/nginx/nginx.conf
        # - ./nginx/ssl:/etc/letsencrypt
        # - ./nginx/sites-available:/etc/nginx/sites-available
        # - ./nginx/sites-enabled:/etc/nginx/sites-enabled
        #      - ./nginx.conf:/etc/nginx/nginx.conf
        #      - ./sites-available:/etc/nginx/sites-available
        #      - ./sites-enabled:/etc/nginx/sites-enabled

        # - ./nginx/certbot/conf:/etc/letsencrypt
        # - ./etc/letsencrypt:/etc/letsencrypt:ro
        # - ./nginx/certbot/www:/var/www/certbot
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    ports:
      - "80:80"
      - "443:443"
    networks:
      - clean-energy-network
    depends_on:
      - frontend

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./nginx/certbot/www:/var/www/certbot
      - ./nginx/certbot/conf:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    # entrypoint: "/bin/sh -c 'certbot certonly --webroot --webroot-path=/var/www/certbot --agree-tos --no-eff-email --email raikonif@gmail.com -d energialimpia.com.bo'"
    networks:
      - clean-energy-network
    restart: always

networks:
  clean-energy-network:
    driver: bridge # Usa la red bridge predeterminada de Docker
